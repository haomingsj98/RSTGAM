// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_eta
arma::vec compute_eta(const arma::mat& X, const arma::vec& theta, const arma::mat& BQ2, const arma::vec& gamma, const arma::vec& xi, int t);
RcppExport SEXP _RSTGAM_compute_eta(SEXP XSEXP, SEXP thetaSEXP, SEXP BQ2SEXP, SEXP gammaSEXP, SEXP xiSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type BQ2(BQ2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_eta(X, theta, BQ2, gamma, xi, t));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_gamma
arma::vec compute_gradient_gamma(const arma::mat& BQ2, const arma::vec& temp3, const arma::mat& P, const arma::vec& gamma, double lambda1);
RcppExport SEXP _RSTGAM_compute_gradient_gamma(SEXP BQ2SEXP, SEXP temp3SEXP, SEXP PSEXP, SEXP gammaSEXP, SEXP lambda1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type BQ2(BQ2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type temp3(temp3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_gamma(BQ2, temp3, P, gamma, lambda1));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_theta
arma::vec compute_gradient_theta(const arma::mat& X, const arma::vec& temp3);
RcppExport SEXP _RSTGAM_compute_gradient_theta(SEXP XSEXP, SEXP temp3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type temp3(temp3SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_theta(X, temp3));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSTGAM_compute_eta", (DL_FUNC) &_RSTGAM_compute_eta, 6},
    {"_RSTGAM_compute_gradient_gamma", (DL_FUNC) &_RSTGAM_compute_gradient_gamma, 5},
    {"_RSTGAM_compute_gradient_theta", (DL_FUNC) &_RSTGAM_compute_gradient_theta, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSTGAM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
